# Sign Extension Template
# Signs Azure DevOps extension VSIX files using ESRP

parameters:
- name: extensionName
  type: string

steps:
# Download build artifacts
- download: current
  artifact: 'build-${{ parameters.extensionName }}'
  displayName: 'Download Build Artifacts'

# Prepare signing directory
- task: PowerShell@2
  displayName: 'Prepare Files for Signing'
  inputs:
    targetType: 'inline'
    script: |
      $sourceDir = "$(Pipeline.Workspace)/build-${{ parameters.extensionName }}"
      $unsignedDir = "$(Build.ArtifactStagingDirectory)/unsigned"
      $signedDir = "$(Build.ArtifactStagingDirectory)/signed"
      
      # Create directories
      New-Item -ItemType Directory -Force -Path $unsignedDir
      New-Item -ItemType Directory -Force -Path $signedDir
      
      # Copy VSIX files to unsigned directory
      $vsixFiles = Get-ChildItem -Path $sourceDir -Filter "*.vsix"
      foreach ($vsix in $vsixFiles) {
          Write-Host "Preparing for signing: $($vsix.Name)"
          Copy-Item $vsix.FullName -Destination $unsignedDir
      }
      
      # Set count for validation
      Write-Host "##vso[task.setvariable variable=VsixCount]$($vsixFiles.Count)"

# ESRP Code Signing for Azure DevOps Extensions
- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@5
  displayName: 'ESRP Extension Signing'
  inputs:
    ConnectedServiceName: '$(Control.EsrpServiceConnectionName)'
    AppRegistrationClientId: '$(Control.AppRegistrationClientId)'
    AppRegistrationTenantId: '$(Control.AppRegistrationTenantId)'
    AuthAKVName: '$(Control.AuthAKVName)'
    AuthCertName: '$(Control.AuthCertName)'
    AuthSignCertName: '$(Control.AuthSignCertName)'
    FolderPath: '$(Build.ArtifactStagingDirectory)/unsigned'
    Pattern: '*.vsix'
    signConfigType: inlineSignParams
    inlineOperation: |
      [
        {
          "KeyCode": "CP-500813",
          "OperationCode": "AdoExtensionSign",
          "ToolName": "sign",
          "ToolVersion": "1.0",
          "Parameters": { }
        }
      ]
    SessionTimeout: 30

# Verify signing
- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@5
  displayName: 'ESRP Extension Verification'
  inputs:
    ConnectedServiceName: '$(Control.EsrpServiceConnectionName)'
    AppRegistrationClientId: '$(Control.AppRegistrationClientId)'
    AppRegistrationTenantId: '$(Control.AppRegistrationTenantId)'
    AuthAKVName: '$(Control.AuthAKVName)'
    AuthCertName: '$(Control.AuthCertName)'
    AuthSignCertName: '$(Control.AuthSignCertName)'
    FolderPath: '$(Build.ArtifactStagingDirectory)/unsigned'
    Pattern: '*.vsix'
    signConfigType: inlineSignParams
    inlineOperation: |
      [
        {
          "KeyCode": "CP-500813",
          "OperationCode": "AdoExtensionVerify",
          "ToolName": "sign",
          "ToolVersion": "1.0",
          "Parameters": {}
        }
      ]
    SessionTimeout: 30

# Move signed files
- task: PowerShell@2
  displayName: 'Move Signed Files'
  inputs:
    targetType: 'inline'
    script: |
      $unsignedDir = "$(Build.ArtifactStagingDirectory)/unsigned"
      $signedDir = "$(Build.ArtifactStagingDirectory)/signed"
      
      # Move all signed VSIX files
      $vsixFiles = Get-ChildItem -Path $unsignedDir -Filter "*.vsix"
      foreach ($vsix in $vsixFiles) {
          Write-Host "Moving signed file: $($vsix.Name)"
          Move-Item $vsix.FullName -Destination $signedDir
      }
      
      # Verify all files were signed
      $signedFiles = Get-ChildItem -Path $signedDir -Filter "*.vsix"
      if ($signedFiles.Count -ne $(VsixCount)) {
          Write-Error "Signing validation failed. Expected $(VsixCount) files, found $($signedFiles.Count)"
          exit 1
      }
      
      Write-Host "Successfully signed $($signedFiles.Count) files"
      
      # Create metadata file
      $metadata = @{
          ExtensionName = "${{ parameters.extensionName }}"
          SignedAt = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
          SignedFiles = $signedFiles.Name
          BuildId = $env:BUILD_BUILDID
          CommitId = $env:BUILD_SOURCEVERSION
      }
      
      $metadata | ConvertTo-Json | Out-File "$signedDir/signing-metadata.json"

# Additional security verification (optional)
- task: BinSkim@4
  displayName: 'BinSkim Security Analysis'
  condition: succeeded()
  continueOnError: true
  inputs:
    InputType: 'Basic'
    Function: 'analyze'
    TargetPattern: 'guardianGlob'
    AnalyzeTargetGlob: '$(Build.ArtifactStagingDirectory)/signed/*.vsix'