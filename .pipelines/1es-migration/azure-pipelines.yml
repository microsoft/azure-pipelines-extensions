# Azure Pipelines Extensions 1ES Build Pipeline
# This pipeline builds, signs, and publishes Azure DevOps extensions using 1ES standards
# Compliant with Secure Extension Onboarding initiative

name: Extension $(ExtensionName) - $(Date:yyyyMMdd)$(Rev:.r)
appendCommitMessageToRunName: false

trigger: none
#  branches:
#    include:
#    - main

parameters:
- name: extensionName
  displayName: 'Extension to Build'
  type: string
  default: 'IISWebAppDeploy'
  values:
  - IISWebAppDeploy
  - Ansible
  - Terraform
  - all
- name: forceCodeSign
  displayName: 'Force Code Signing (even for non-main branch)'
  type: boolean
  default: false
- name: publishExtension
  displayName: 'Publish Extension to Marketplace'
  type: boolean
  default: false
- name: simulateCodeSigningError
  displayName: 'Simulate code signing error (for testing)'
  type: boolean
  default: false

variables:
# 1ES Security Scanning
- name: CodeQL.Enabled
  value: true
# Extension registry settings
- name: PublisherId
  value: 'ms-vscs-rm'
# Signing variables from secure group
- group: EPS.ESRPSigningProdAME
# Dynamic variables
- name: ExtensionName
  value: ${{ parameters.extensionName }}
- name: IsMainBranchBuild
  value: $[eq(variables['Build.SourceBranchName'], 'main')]

resources:
  repositories:
  # 1ES Pipeline Templates
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    # SDL Configuration
    sdl:
      sourceAnalysisPool:
        name: 1ESPtTfsAgentBuildPoolSDL
      spotBugs:
        enabled: false # Not applicable for TypeScript/JavaScript
      credscan:
        enabled: true
      binskim:
        enabled: true
      eslint:
        enabled: true

    # Build Pool
    pool:
      name: 1ESPtTfsAgentBuildPool1

    # Custom Build Tags
    customBuildTags:
    - ES365AIMigrationTooling
    - 1ES-AzureExtensions
    - SecureExtensionOnboarding
    - Extension-${{ parameters.extensionName }}

    stages:
    # Build and Test Stage
    - stage: BuildAndTest
      displayName: 'Build and Test ${{ parameters.extensionName }}'
      jobs:
      - job: BuildAndTestJob
        displayName: 'Build Extension'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Build Artifacts (Unsigned)'
            targetPath: '$(System.ArtifactsDirectory)'
            artifactName: 'vsix-unsigned'
        steps:
        - checkout: self
          displayName: 'Checkout Extensions Repository'
          clean: true
          fetchTags: false

        # Setup Node.js
        - task: NodeTool@0
          displayName: 'Install Node.js'
          inputs:
            versionSpec: '20.x'

        # Install dependencies
        - task: Npm@1
          displayName: 'Install Dependencies'
          inputs:
            command: 'install'
            verbose: false

        # Install TFX CLI
        - task: Npm@1
          displayName: 'Install TFX CLI'
          inputs:
            command: 'custom'
            customCommand: 'install -g tfx-cli'

        # Build with Gulp
        - task: PowerShell@2
          displayName: 'Build Extensions with Gulp'
          inputs:
            targetType: 'inline'
            script: 'gulp build'
            workingDirectory: '$(Build.SourcesDirectory)'

        # Package with Gulp
        - task: PowerShell@2
          displayName: 'Package Extensions with Gulp'
          inputs:
            targetType: 'inline'
            script: 'gulp package'
            workingDirectory: '$(Build.SourcesDirectory)'

        # Copy VSIX files to artifacts directory
        - task: CopyFiles@2
          displayName: 'Copy VSIX Files to Artifacts'
          inputs:
            SourceFolder: '_package'
            Contents: '**/*.vsix'
            TargetFolder: '$(System.ArtifactsDirectory)'
            flattenFolders: true

        # Validate artifacts were created
        - task: PowerShell@2
          displayName: 'Validate Build Artifacts'
          inputs:
            targetType: 'inline'
            script: |
              $vsixFiles = Get-ChildItem "$(System.ArtifactsDirectory)" -Filter "*.vsix"
              if ($vsixFiles.Count -eq 0) {
                  Write-Error "‚ùå No VSIX files were created during build"
                  exit 1
              }
              
              Write-Host "‚úÖ Build completed successfully:"
              foreach ($vsix in $vsixFiles) {
                  Write-Host "  - $($vsix.Name) ($([math]::Round($vsix.Length/1MB, 2)) MB)"
              }

    # Code Signing Stage (Secure Extension Onboarding Requirement)
    - stage: CodeSigning
      displayName: 'ESRP Code Signing'
      condition: or(eq(variables['IsMainBranchBuild'], 'True'), ${{ eq(parameters.forceCodeSign, 'true') }}, ${{ eq(parameters.simulateCodeSigningError, 'true') }})
      dependsOn: BuildAndTest
      jobs:
      - job: CodeSigningJob
        displayName: 'ESRP Code Signing'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Signed Artifacts'
            targetPath: '$(System.ArtifactsDirectory)'
            artifactName: 'vsix-signed'
        steps:
        # Download unsigned artifacts
        - download: current
          artifact: vsix-unsigned
          displayName: 'Download Unsigned Artifacts'

        # Simulate error for testing
        - script: |
            echo "‚ùå Simulated error in CodeSigning step for testing purposes"
            exit 1
          displayName: 'Simulate CodeSigning Error'
          condition: ${{ eq(parameters.simulateCodeSigningError, 'true') }}

        # Copy files to working directory
        - task: CopyFiles@2
          displayName: 'Copy Files to Working Directory'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/vsix-unsigned'
            Contents: '*.vsix'
            TargetFolder: '$(System.DefaultWorkingDirectory)'

        # ESRP Code Signing (Secure Extension Onboarding Compliant)
        - task: 1ES.Signing@1
          displayName: 'ESRP Code Signing - Secure Extension Onboarding'
          inputs:
            authenticationType: 'servicePrincipal'
            azureSubscription: '$(Control.EsrpServiceConnectionName)'
            signConfigType: 'inlineSignParams'
            inlineOperation: |
              [
                {
                  "KeyCode": "CP-500813",
                  "OperationCode": "AdoExtensionSign",
                  "ToolName": "sign",
                  "ToolVersion": "1.0",
                  "Parameters": {}
                },
                {
                  "KeyCode": "CP-500813",
                  "OperationCode": "AdoExtensionVerify",
                  "ToolName": "sign",
                  "ToolVersion": "1.0",
                  "Parameters": {}
                }
              ]
            SessionTimeout: '60'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'
            FolderPath: '$(System.DefaultWorkingDirectory)'
            Pattern: '*.vsix'

        # Verify signatures
        - task: PowerShell@2
          displayName: 'Verify Code Signatures'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "üîç Verifying code signatures for Secure Extension Onboarding compliance"
              
              $vsixFiles = Get-ChildItem "$(System.DefaultWorkingDirectory)" -Filter "*.vsix"
              $allSigned = $true
              
              foreach ($vsix in $vsixFiles) {
                  Write-Host "Checking signature for: $($vsix.Name)"
                  
                  # Use Get-AuthenticodeSignature to verify
                  $signature = Get-AuthenticodeSignature $vsix.FullName
                  
                  if ($signature.Status -eq "Valid") {
                      Write-Host "‚úÖ $($vsix.Name) is properly signed"
                      Write-Host "   Signer: $($signature.SignerCertificate.Subject)"
                      Write-Host "   Thumbprint: $($signature.SignerCertificate.Thumbprint)"
                  } else {
                      Write-Error "‚ùå $($vsix.Name) signature status: $($signature.Status)"
                      $allSigned = $false
                  }
              }
              
              if (-not $allSigned) {
                  Write-Error "‚ùå Code signing verification failed - Secure Extension Onboarding requirements not met"
                  exit 1
              } else {
                  Write-Host "‚úÖ All extensions are properly signed and compliant with Secure Extension Onboarding"
              }

        # Copy signed files to artifacts directory
        - task: CopyFiles@2
          displayName: 'Copy Signed Files to Artifacts'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: '*.vsix'
            TargetFolder: '$(System.ArtifactsDirectory)'

    # Publish to Marketplace Stage (Manual Trigger)
    - stage: PublishToMarketplace
      displayName: 'Publish to Marketplace'
      condition: and(succeeded('CodeSigning'), ${{ eq(parameters.publishExtension, 'true') }})
      dependsOn: CodeSigning
      jobs:
      - deployment: PublishMarketplaceJob
        displayName: 'Publish to Azure DevOps Marketplace'
        environment: 'Production-Marketplace'
        strategy:
          runOnce:
            deploy:
              steps:
              # Download signed artifacts
              - download: current
                artifact: vsix-signed
                displayName: 'Download Signed Artifacts'

              # Setup Node.js for TFX CLI
              - task: NodeTool@0
                displayName: 'Install Node.js'
                inputs:
                  versionSpec: '20.x'

              # Install TFX CLI
              - task: Npm@1
                displayName: 'Install TFX CLI'
                inputs:
                  command: 'custom'
                  customCommand: 'install -g tfx-cli'

              # Publish to Marketplace using Managed Identity
              - task: PowerShell@2
                displayName: 'Publish Extension to Marketplace'
                inputs:
                  targetType: 'inline'
                  script: |
                    Write-Host "üöÄ Publishing signed extensions to Azure DevOps Marketplace"
                    
                    $vsixFiles = Get-ChildItem "$(Pipeline.Workspace)/vsix-signed" -Filter "*.vsix"
                    
                    foreach ($vsix in $vsixFiles) {
                        Write-Host "Publishing: $($vsix.Name)"
                        
                        # Use TFX CLI with service connection token
                        tfx extension publish `
                          --vsix "$($vsix.FullName)" `
                          --service-url "https://marketplace.visualstudio.com" `
                          --auth-type pat `
                          --token "$(MarketplaceServiceConnection.AccessToken)" `
                          --no-prompt
                        
                        if ($LASTEXITCODE -eq 0) {
                            Write-Host "‚úÖ Successfully published: $($vsix.Name)"
                        } else {
                            Write-Error "‚ùå Failed to publish: $($vsix.Name)"
                            exit 1
                        }
                    }
                    
                    Write-Host "‚úÖ All extensions published successfully using managed identity"

              # Create compliance report
              - task: PowerShell@2
                displayName: 'Generate Compliance Report'
                inputs:
                  targetType: 'inline'
                  script: |
                    $report = @{
                        Extension = "${{ parameters.extensionName }}"
                        PublishedAt = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
                        PublishingMethod = "Managed Identity via 1ES PT Pipeline"
                        SigningMethod = "ESRP Code Signing (CP-500813)"
                        ComplianceStatus = "Secure Extension Onboarding Complete"
                        BuildId = $env:BUILD_BUILDID
                        CommitId = $env:BUILD_SOURCEVERSION
                        Pipeline = "1ES PT Pipeline Template"
                    }
                    
                    $reportPath = "$(System.ArtifactsDirectory)/secure-extension-onboarding-compliance.json"
                    $report | ConvertTo-Json -Depth 2 | Set-Content $reportPath
                    
                    Write-Host "‚úÖ Secure Extension Onboarding compliance report generated"
                    Write-Host "üìã Report location: $reportPath"

    # Sign Stage (1ES PT Compliant Code Signing for Secure Extension Onboarding)
    - stage: Sign
      displayName: 'Code Sign Extensions'
      condition: and(succeeded(), eq(variables['isDevBuild'], 'false'))
      dependsOn: Build
      jobs:
      - job: SignExtensions
        displayName: 'ESRP Code Signing'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Signed Artifacts'
            targetPath: '$(Build.ArtifactStagingDirectory)/signed'
            artifactName: 'signed-$(ExtensionName)'
        steps:
        - template: templates/sign-extension-secure.yml
          parameters:
            extensionName: ${{ parameters.extensionName }}

    # Publish Stage (Managed Identity Publishing for Secure Extension Onboarding)
    - stage: Publish
      displayName: 'Publish to Marketplace'
      condition: and(succeeded(), eq(variables['publishExtension'], 'true'))
      dependsOn: Sign
      jobs:
      - job: PublishExtensions
        displayName: 'Marketplace Publishing'
        steps:
        - template: templates/publish-extension.yml
          parameters:
            extensionName: ${{ parameters.extensionName }}

    # Validate Stage (Secure Extension Onboarding Compliance Check)
    - stage: Validate
      displayName: 'Compliance Validation'
      dependsOn: 
      - Build
      - Sign
      - Publish
      condition: always()
      jobs:
      - job: ValidateCompliance
        displayName: 'Secure Extension Onboarding Validation'
        steps:
        - template: templates/validate-deployment.yml
          parameters:
            extensionName: ${{ parameters.extensionName }}