# Azure Pipelines Extensions 1ES Build Pipeline
# Single build stage: MAIN -> copy, TEST -> copy; then sign, approve, publish (TEST then PUBLIC)

name: Extension $(ExtensionName) - $(Date:yyyyMMdd)$(Rev:.r)
appendCommitMessageToRunName: false

trigger: none

parameters:
- name: extensionName
  displayName: 'Extension to Build'
  type: string
  default: 'IISWebAppDeploy'
  values:
  - Ansible
  - BitBucket
  - CircleCI
  - CopyStageVariableToReleaseVariable
  - ExternalTfs
  - GenevaMonitor
  - IISWebAppDeploy
  - KangarooL2
  - SampleTask
  - ServiceNow
  - TeamCity
- name: forceCodeSign
  displayName: 'Force Code Signing (even for non-main branch)'
  type: boolean
  default: false
- name: publishExtension
  displayName: 'Publish Extension to Marketplace'
  type: boolean
  default: false
- name: simulateCodeSigningError
  displayName: 'Simulate code signing error (for testing)'
  type: boolean
  default: false

variables:
# 1ES Security Scanning
- name: CodeQL.Enabled
  value: true
# Publisher
- name: PublisherId
  value: 'ms-vscs-rm'
# ESRP Signing secrets
- group: EPS.ESRPSigningProdAME
# Dynamic
- name: ExtensionName
  value: ${{ parameters.extensionName }}
- name: IsMainBranchBuild
  value: $[eq(variables['Build.SourceBranchName'], 'main')]

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool:
        name: 1ESPtTfsAgentBuildPoolSDL
      spotBugs:
        enabled: false
      credscan:
        enabled: true
      binskim:
        enabled: true
      eslint:
        enabled: true

    pool:
      name: 1ESPtTfsAgentBuildPool1

    customBuildTags:
    - ES365AIMigrationTooling
    - 1ES-AzureExtensions
    - SecureExtensionOnboarding
    - Extension-${{ parameters.extensionName }}

    stages:

    # ============================== Build & Package ==============================
    - stage: Build_And_Package_Main_And_Test
      displayName: 'Build & Package Extensions (Main + Test)'
      jobs:
      - job: BuildAndPackage
        displayName: 'Build and Package: MAIN then TEST'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish MAIN Build Artifacts (Unsigned)'
            targetPath: '$(System.ArtifactsDirectory)/unsigned'
            artifactName: 'vsix-unsigned'
          - output: pipelineArtifact
            displayName: 'Publish TEST Build Artifacts (Unsigned)'
            targetPath: '$(System.ArtifactsDirectory)/test-unsigned'
            artifactName: 'vsix-test-unsigned'
        steps:
        - checkout: self
          displayName: 'Checkout repository'
          clean: true
          fetchTags: false

        - task: NodeTool@0
          displayName: 'Use Node.js 20.x'
          inputs:
            versionSpec: '20.x'

        - task: Npm@1
          displayName: 'Install dependencies'
          inputs:
            command: install
            verbose: false

        - task: Npm@1
          displayName: 'Install TFX CLI'
          inputs:
            command: custom
            customCommand: 'install -g tfx-cli'

        - task: Npm@1
          displayName: 'Install Gulp CLI'
          inputs:
            command: custom
            customCommand: 'install -g gulp-cli'

        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/custom-artifacts'  
            Contents: '${{ parameters.extensionName }}/*.vsix'
            TargetFolder: '$(Build.ArtifactsDirectory)/unsigned' # PROD unsigned artifact
            flattenFolders: true

        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/custom-artifacts'
            Contents: '${{ parameters.extensionName }}/*.vsix'
            TargetFolder: '$(Build.ArtifactsDirectory)/test-unsigned' # TEST unsigned artifact
            flattenFolders: true

    # ================================ ESRP Code Signing ================================
    - stage: ESRP_Code_Signing_Main_And_Test
      displayName: 'ESRP Code Signing (Main + Test)'
      dependsOn: Build_And_Package_Main_And_Test
      condition: or(eq(variables['IsMainBranchBuild'], 'true'), ${{ eq(parameters.forceCodeSign, 'true') }}, ${{ eq(parameters.simulateCodeSigningError, 'true') }})
      jobs:
      - job: SignVsix
        displayName: 'Sign VSIX: MAIN and TEST'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Signed MAIN Artifact'
            targetPath: '$(System.ArtifactsDirectory)/signed'
            artifactName: 'vsix-signed'
          - output: pipelineArtifact
            displayName: 'Publish Signed TEST Artifact'
            targetPath: '$(System.ArtifactsDirectory)/test-signed'
            artifactName: 'vsix-test-signed'
        steps:
        - download: current
          artifact: vsix-unsigned
          displayName: 'Download unsigned (MAIN)'

        - download: current
          artifact: vsix-test-unsigned
          displayName: 'Download unsigned (TEST)'

        - script: |
            echo "Simulated error in CodeSigning step."
            exit 1
          displayName: 'Simulate CodeSigning error'
          condition: ${{ eq(parameters.simulateCodeSigningError, 'true') }}

        - task: EsrpCodeSigning@5
          displayName: 'ESRP Sign (MAIN)'
          inputs:
            ConnectedServiceName: '$(Control.EsrpServiceConnectionName)'
            AppRegistrationClientId: '$(Control.AppRegistrationClientId)'
            AppRegistrationTenantId: '$(Control.AppRegistrationTenantId)'
            AuthAKVName: '$(Control.AuthAKVName)'
            AuthCertName: '$(Control.AuthCertName)'
            AuthSignCertName: '$(Control.AuthSignCertName)'
            FolderPath: '$(Pipeline.Workspace)\vsix-unsigned'
            Pattern: '*.vsix'
            signConfigType: inlineSignParams
            inlineOperation: |-
              [
                {"KeyCode":"CP-500813","OperationCode":"AdoExtensionSign","ToolName":"sign","ToolVersion":"1.0","Parameters":{}},
                {"KeyCode":"CP-500813","OperationCode":"AdoExtensionVerify","ToolName":"sign","ToolVersion":"1.0","Parameters":{}}
              ]
            SessionTimeout: 30

        - task: CopyFiles@2
          displayName: 'Collect signed (MAIN)'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)\vsix-unsigned'
            Contents: '*.vsix'
            TargetFolder: '$(System.ArtifactsDirectory)/signed'

        - task: EsrpCodeSigning@5
          displayName: 'ESRP Sign (TEST)'
          inputs:
            ConnectedServiceName: '$(Control.EsrpServiceConnectionName)'
            AppRegistrationClientId: '$(Control.AppRegistrationClientId)'
            AppRegistrationTenantId: '$(Control.AppRegistrationTenantId)'
            AuthAKVName: '$(Control.AuthAKVName)'
            AuthCertName: '$(Control.AuthCertName)'
            AuthSignCertName: '$(Control.AuthSignCertName)'
            FolderPath: '$(Pipeline.Workspace)\vsix-test-unsigned'
            Pattern: '*.vsix'
            signConfigType: inlineSignParams
            inlineOperation: |-
              [
                {"KeyCode":"CP-500813","OperationCode":"AdoExtensionSign","ToolName":"sign","ToolVersion":"1.0","Parameters":{}},
                {"KeyCode":"CP-500813","OperationCode":"AdoExtensionVerify","ToolName":"sign","ToolVersion":"1.0","Parameters":{}}
              ]
            SessionTimeout: 30

        - task: CopyFiles@2
          displayName: 'Collect signed (TEST)'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)\vsix-test-unsigned'
            Contents: '*.vsix'
            TargetFolder: '$(System.ArtifactsDirectory)/test-signed'

    # ======================== Approval: Publish TEST (private) ========================
    - stage: Approval_For_Test_Publish
      displayName: 'Approval: Publish TEST (Private)'
      dependsOn: ESRP_Code_Signing_Main_And_Test
      condition: and(succeeded(), ${{ eq(parameters.publishExtension, 'true') }})
      jobs:
      - job: ApproveTest
        displayName: 'Manual Approval for TEST publish'
        pool: server
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440
          inputs:
            notifyUsers: 'razvanmanole@microsoft.com'
            instructions: 'Approve this step to publish the TEST extension (private).'

    # ================================= Publish TEST (private) ============================
    - stage: Publish_Test_Extension_Private
      displayName: 'Publish TEST Extension (Private Marketplace)'
      dependsOn: Approval_For_Test_Publish
      condition: and(succeeded(), ${{ eq(parameters.publishExtension, 'true') }})
      jobs:
      - job: PublishTest
        displayName: 'Publish TEST VSIX to Marketplace (Private)'
        steps:
        - download: current
          artifact: vsix-test-signed
          displayName: 'Download signed TEST artifact'

        - task: NodeTool@0
          displayName: 'Use Node.js 20.x'
          inputs:
            versionSpec: '20.x'

        - task: TfxInstaller@5
          displayName: 'Install TFX'
          inputs:
            version: 'v0.21.1'

        - task: 1ES.PublishAzureDevOpsExtension@1
          displayName: 'Publish TEST extension (private)'
          inputs:
            connectTo: AzureRM
            connectedServiceNameAzureRM: '1es-extensions-publication-secure-service-connection'
            fileType: vsix
            vsixFile: '$(Pipeline.Workspace)/vsix-test-signed/*.vsix'
            targetPath: '$(Pipeline.Workspace)/vsix-test-signed'
            validateExtension: false
            useV5: true

    # ======================== Approval: Publish PUBLIC ==============================
    - stage: Approval_For_Public_Publish
      displayName: 'Approval: Publish PUBLIC'
      dependsOn: Publish_Test_Extension_Private
      condition: and(succeeded(), ${{ eq(parameters.publishExtension, 'true') }})
      jobs:
      - job: ApprovePublic
        displayName: 'Manual Approval for PUBLIC publish'
        pool: server
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440
          inputs:
            notifyUsers: 'razvanmanole@microsoft.com'
            instructions: 'Approve this step to publish the PUBLIC extension.'

    # ===================================== Publish PUBLIC ================================
    - stage: Publish_Public_Extension
      displayName: 'Publish PUBLIC Extension (Marketplace)'
      dependsOn: Approval_For_Public_Publish
      condition: and(succeeded(), ${{ eq(parameters.publishExtension, 'true') }})
      jobs:
      - job: PublishPublic
        displayName: 'Publish PUBLIC VSIX to Marketplace'
        steps:
        - download: current
          artifact: vsix-signed
          displayName: 'Download signed MAIN artifact'

        - task: NodeTool@0
          displayName: 'Use Node.js 20.x'
          inputs:
            versionSpec: '20.x'

        - task: TfxInstaller@5
          displayName: 'Install TFX'
          inputs:
            version: 'v0.21.1'

        - task: 1ES.PublishAzureDevOpsExtension@1
          displayName: 'Publish PUBLIC extension (publisher: ms-vscs-rm)'
          inputs:
            connectTo: AzureRM
            connectedServiceNameAzureRM: '1es-extensions-publication-secure-service-connection'
            fileType: vsix
            vsixFile: '$(Pipeline.Workspace)/vsix-signed/*.vsix'
            targetPath: '$(Pipeline.Workspace)/vsix-signed'
            validateExtension: false
            useV5: true
