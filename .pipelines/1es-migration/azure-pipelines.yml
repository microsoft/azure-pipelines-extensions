# Azure Pipelines Extensions 1ES Build Pipeline
# Single build stage: MAIN -> copy, TEST -> copy; then sign, approve, publish (TEST then PUBLIC)

name: Extension $(ExtensionName) - $(Date:yyyyMMdd)$(Rev:.r)
appendCommitMessageToRunName: false

trigger: none

parameters:
- name: extensionName
  displayName: 'Extension to Build'
  type: string
  default: 'IISWebAppDeploy'
  values:
  - Ansible
  - BitBucket
  - CircleCI
  - CopyStageVariableToReleaseVariable
  - ExternalTfs
  - GenevaMonitor
  - IISWebAppDeploy
  - KangarooL2
  - SampleTask
  - ServiceNow
  - TeamCity
- name: forceCodeSign
  displayName: 'Force Code Signing (even for non-main branch)'
  type: boolean
  default: false
- name: publishExtension
  displayName: 'Publish Extension to Marketplace'
  type: boolean
  default: false
- name: simulateCodeSigningError
  displayName: 'Simulate code signing error (for testing)'
  type: boolean
  default: false

variables:
# 1ES Security Scanning
- name: CodeQL.Enabled
  value: true
# Publisher
- name: PublisherId
  value: 'ms-vscs-rm'
# ESRP Signing secrets
- group: EPS.ESRPSigningProdAME
# Dynamic
- name: ExtensionName
  value: ${{ parameters.extensionName }}
- name: IsMainBranchBuild
  value: $[eq(variables['Build.SourceBranchName'], 'main')]

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool:
        name: 1ESPtTfsAgentBuildPoolSDL
      spotBugs: { enabled: false }
      credscan: { enabled: true }
      binskim: { enabled: true }
      eslint:  { enabled: true }

    pool:
      name: 1ESPtTfsAgentBuildPool1

    customBuildTags:
    - ES365AIMigrationTooling
    - 1ES-AzureExtensions
    - SecureExtensionOnboarding
    - Extension-${{ parameters.extensionName }}

    stages:

    # ============================== Build (MAIN+TEST) ==============================
    - stage: Build
      displayName: 'Build ${{ parameters.extensionName }} (MAIN + TEST)'
      jobs:
      - job: BuildJob
        displayName: 'Build and Package MAIN, then TEST'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish MAIN Build Artifacts (Unsigned)'
            targetPath: '$(System.ArtifactsDirectory)/unsigned'
            artifactName: 'vsix-unsigned'
          - output: pipelineArtifact
            displayName: 'Publish TEST Build Artifacts (Unsigned)'
            targetPath: '$(System.ArtifactsDirectory)/test-unsigned'
            artifactName: 'vsix-test-unsigned'
        steps:
        - checkout: self
          displayName: 'Checkout'
          clean: true
          fetchTags: false

        - task: NodeTool@0
          displayName: 'Install Node.js'
          inputs: { versionSpec: '10.x' }

        - task: Npm@1
          displayName: 'Install Dependencies'
          inputs: { command: 'install', verbose: false }

        - task: Npm@1
          displayName: 'Install TFX CLI'
          inputs: { command: 'custom', customCommand: 'install -g tfx-cli' }

        - task: Npm@1
          displayName: 'Install Gulp CLI'
          inputs: { command: 'custom', customCommand: 'install -g gulp-cli' }

        # ---- MAIN build/package -> copy to unsigned ----
        - task: PowerShell@2
          displayName: 'Clean (MAIN) - gulp clean'
          inputs: { targetType: inline, script: 'gulp clean', workingDirectory: '$(Build.SourcesDirectory)' }

        - task: PowerShell@2
          displayName: 'Build MAIN - gulp build'
          inputs: { targetType: inline, script: 'gulp build', workingDirectory: '$(Build.SourcesDirectory)' }

        - task: PowerShell@2
          displayName: 'Package MAIN - gulp package'
          inputs: { targetType: inline, script: 'gulp package', workingDirectory: '$(Build.SourcesDirectory)' }

        - task: CopyFiles@2
          displayName: 'Copy MAIN VSIX to $(System.ArtifactsDirectory)/unsigned'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/_package'
            Contents: '${{ parameters.extensionName }}/*.vsix'
            TargetFolder: '$(System.ArtifactsDirectory)/unsigned'
            flattenFolders: true

        # ---- TEST build/package -> copy to test-unsigned ----
        - task: PowerShell@2
          displayName: 'Build TEST - gulp build --test'
          inputs: { targetType: inline, script: 'gulp build --test', workingDirectory: '$(Build.SourcesDirectory)' }

        - task: PowerShell@2
          displayName: 'Package TEST - gulp package'
          inputs: { targetType: inline, script: 'gulp package', workingDirectory: '$(Build.SourcesDirectory)' }

        - task: CopyFiles@2
          displayName: 'Copy TEST VSIX to $(System.ArtifactsDirectory)/test-unsigned'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/_package'
            Contents: '${{ parameters.extensionName }}/*.vsix'
            TargetFolder: '$(System.ArtifactsDirectory)/test-unsigned'
            flattenFolders: true

    # ================================ Code Signing ================================
    - stage: CodeSigning
      displayName: 'Code Signing'
      condition: or(eq(variables['IsMainBranchBuild'], 'true'), ${{ eq(parameters.forceCodeSign, 'true') }}, ${{ eq(parameters.simulateCodeSigningError, 'true') }})
      dependsOn: Build
      jobs:
      - job: CodeSigningJob
        displayName: 'ESRP CodeSigning (MAIN + TEST)'
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Signed MAIN vsix artifact'
            targetPath: '$(System.ArtifactsDirectory)/signed'
            artifactName: vsix-signed
          - output: pipelineArtifact
            displayName: 'Signed TEST vsix artifact'
            targetPath: '$(System.ArtifactsDirectory)/test-signed'
            artifactName: vsix-test-signed
        steps:
        - download: current
          artifact: vsix-unsigned
          displayName: 'Download unsigned (MAIN)'

        - download: current
          artifact: vsix-test-unsigned
          displayName: 'Download unsigned (TEST)'

        - script: |
            echo "Simulated error in CodeSigning step."
            exit 1
          displayName: 'Simulate CodeSigning Error'
          condition: ${{ eq(parameters.simulateCodeSigningError, 'true') }}

        # Sign MAIN
        - task: EsrpCodeSigning@5
          displayName: 'ESRP CodeSigning (MAIN)'
          inputs:
            ConnectedServiceName: '$(Control.EsrpServiceConnectionName)'
            AppRegistrationClientId: '$(Control.AppRegistrationClientId)'
            AppRegistrationTenantId: '$(Control.AppRegistrationTenantId)'
            AuthAKVName: '$(Control.AuthAKVName)'
            AuthCertName: '$(Control.AuthCertName)'
            AuthSignCertName: '$(Control.AuthSignCertName)'
            FolderPath: '$(Pipeline.Workspace)\vsix-unsigned'
            Pattern: '*.vsix'
            signConfigType: inlineSignParams
            inlineOperation: |-
              [
                {"KeyCode":"CP-500813","OperationCode":"AdoExtensionSign","ToolName":"sign","ToolVersion":"1.0","Parameters":{}},
                {"KeyCode":"CP-500813","OperationCode":"AdoExtensionVerify","ToolName":"sign","ToolVersion":"1.0","Parameters":{}}
              ]
            SessionTimeout: 30

        - task: CopyFiles@2
          displayName: 'Collect signed (MAIN)'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)\vsix-unsigned'
            Contents: '*.vsix'
            TargetFolder: '$(System.ArtifactsDirectory)/signed'

        # Sign TEST
        - task: EsrpCodeSigning@5
          displayName: 'ESRP CodeSigning (TEST)'
          inputs:
            ConnectedServiceName: '$(Control.EsrpServiceConnectionName)'
            AppRegistrationClientId: '$(Control.AppRegistrationClientId)'
            AppRegistrationTenantId: '$(Control.AppRegistrationTenantId)'
            AuthAKVName: '$(Control.AuthAKVName)'
            AuthCertName: '$(Control.AuthCertName)'
            AuthSignCertName: '$(Control.AuthSignCertName)'
            FolderPath: '$(Pipeline.Workspace)\vsix-test-unsigned'
            Pattern: '*.vsix'
            signConfigType: inlineSignParams
            inlineOperation: |-
              [
                {"KeyCode":"CP-500813","OperationCode":"AdoExtensionSign","ToolName":"sign","ToolVersion":"1.0","Parameters":{}},
                {"KeyCode":"CP-500813","OperationCode":"AdoExtensionVerify","ToolName":"sign","ToolVersion":"1.0","Parameters":{}}
              ]
            SessionTimeout: 30

        - task: CopyFiles@2
          displayName: 'Collect signed (TEST)'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)\vsix-test-unsigned'
            Contents: '*.vsix'
            TargetFolder: '$(System.ArtifactsDirectory)/test-signed'

    # ======================== Manual Approval BEFORE TEST publish ========================
    - stage: WaitForTestApproval
      displayName: 'Approve TEST publish'
      dependsOn: CodeSigning
      jobs:
      - job: ManualApprovalForTest
        displayName: 'Manual Approval (TEST)'
        pool: server
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440
          inputs:
            notifyUsers: 'vhorbachov@microsoft.com'
            instructions: 'Approve this step to publish the TEST extension (private).'

    # ================================= Publish TEST (private) ==============================
    - stage: PublishTestToMarketplace
      displayName: 'Publish TEST extension (private)'
      dependsOn: WaitForTestApproval
      jobs:
      - job: PublishTestVSIX
        displayName: 'Publish TEST vsix to marketplace (private)'
        steps:
        - download: current
          artifact: vsix-test-signed
          displayName: 'Download Signed TEST Artifact'

        - task: NodeTool@0
          displayName: 'Install Node.js'
          inputs: { versionSpec: '10.x' }

        - task: TfxInstaller@5
          inputs: { version: 'v0.21.1' }

        - task: 1ES.PublishAzureDevOpsExtension@1
          displayName: 'Publish TEST extension (private)'
          inputs:
            connectTo: 'AzureRM'
            connectedServiceNameAzureRM: '1es-extensions-publication-secure-service-connection'
            fileType: 'vsix'
            vsixFile: '$(Pipeline.Workspace)/vsix-test-signed/*.vsix'
            targetPath: '$(Pipeline.Workspace)/vsix-test-signed'
            validateExtension: false
            useV5: true

    # ======================== Manual Approval BEFORE PUBLIC publish ========================
    - stage: WaitForValidation
      displayName: 'Approve PUBLIC publish'
      dependsOn: PublishTestToMarketplace
      jobs:
      - job: ManualApproval
        displayName: 'Manual Approval (PUBLIC)'
        pool: server
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440
          inputs:
            notifyUsers: 'vhorbachov@microsoft.com'
            instructions: 'Approve this step to publish the PUBLIC extension.'

    # ===================================== Publish PUBLIC ==================================
    - stage: PublishToMarketplace
      displayName: 'Publish PUBLIC extension'
      dependsOn: WaitForValidation
      jobs:
      - job: PublishVSIX
        displayName: 'Publish vsix to marketplace'
        steps:
        - download: current
          artifact: vsix-signed
          displayName: 'Download Signed Artifact'

        - task: NodeTool@0
          displayName: 'Install Node.js'
          inputs: { versionSpec: '10.x' }

        - task: TfxInstaller@5
          inputs: { version: 'v0.21.1' }

        - task: 1ES.PublishAzureDevOpsExtension@1
          displayName: 'Publish the public extension to ms-vscs-rm'
          inputs:
            connectTo: 'AzureRM'
            connectedServiceNameAzureRM: '1es-extensions-publication-secure-service-connection'
            fileType: 'vsix'
            vsixFile: '$(Pipeline.Workspace)/vsix-signed/*.vsix'
            targetPath: '$(Pipeline.Workspace)/vsix-signed'
            validateExtension: false
            useV5: true